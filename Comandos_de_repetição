{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMpYNO0lVxOJCPSX/0OYXU5"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "### 1 - Transcreva o algoritmo a seguir para Python:\n",
        "\n",
        "\n",
        "```\n",
        "ALGORITMO TABUADA_9;\n",
        "  VAR\n",
        "    N, X, R : INTEIRO;\n",
        "  INICIO\n",
        "    PARA X DE 1 ATE 10 FACA\n",
        "     INICIO\n",
        "        R ← 9 * X;\n",
        "        ESCREVER ( X, ‘ x 9 = ’, R);\n",
        "     FIM;\n",
        "  FIM_PARA;\n",
        "FIM.\n",
        "```\n"
      ],
      "metadata": {
        "id": "GFwkT1JJjCD_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = 0\n",
        "r = 0\n",
        "\n",
        "for x in range(1, 11):\n",
        "    r += 9\n",
        "    print(x, 'x 9 =', r)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q9j7AyobjZR_",
        "outputId": "75546daf-dce0-4724-d4c0-c62a6d990e78"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 x 9 = 9\n",
            "2 x 9 = 18\n",
            "3 x 9 = 27\n",
            "4 x 9 = 36\n",
            "5 x 9 = 45\n",
            "6 x 9 = 54\n",
            "7 x 9 = 63\n",
            "8 x 9 = 72\n",
            "9 x 9 = 81\n",
            "10 x 9 = 90\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 2 - Faça um programa em Python que mostre todos os números inteiros ímpares situados na faixa de 1000 a 1500."
      ],
      "metadata": {
        "id": "LRPhUOz0lpNS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for x in range(1000, 1501):\n",
        "    if x % 2 != 0:\n",
        "        print(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Akt_q-_ylweJ",
        "outputId": "6cd33158-1040-45d8-c108-47631afb869e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1001\n",
            "1003\n",
            "1005\n",
            "1007\n",
            "1009\n",
            "1011\n",
            "1013\n",
            "1015\n",
            "1017\n",
            "1019\n",
            "1021\n",
            "1023\n",
            "1025\n",
            "1027\n",
            "1029\n",
            "1031\n",
            "1033\n",
            "1035\n",
            "1037\n",
            "1039\n",
            "1041\n",
            "1043\n",
            "1045\n",
            "1047\n",
            "1049\n",
            "1051\n",
            "1053\n",
            "1055\n",
            "1057\n",
            "1059\n",
            "1061\n",
            "1063\n",
            "1065\n",
            "1067\n",
            "1069\n",
            "1071\n",
            "1073\n",
            "1075\n",
            "1077\n",
            "1079\n",
            "1081\n",
            "1083\n",
            "1085\n",
            "1087\n",
            "1089\n",
            "1091\n",
            "1093\n",
            "1095\n",
            "1097\n",
            "1099\n",
            "1101\n",
            "1103\n",
            "1105\n",
            "1107\n",
            "1109\n",
            "1111\n",
            "1113\n",
            "1115\n",
            "1117\n",
            "1119\n",
            "1121\n",
            "1123\n",
            "1125\n",
            "1127\n",
            "1129\n",
            "1131\n",
            "1133\n",
            "1135\n",
            "1137\n",
            "1139\n",
            "1141\n",
            "1143\n",
            "1145\n",
            "1147\n",
            "1149\n",
            "1151\n",
            "1153\n",
            "1155\n",
            "1157\n",
            "1159\n",
            "1161\n",
            "1163\n",
            "1165\n",
            "1167\n",
            "1169\n",
            "1171\n",
            "1173\n",
            "1175\n",
            "1177\n",
            "1179\n",
            "1181\n",
            "1183\n",
            "1185\n",
            "1187\n",
            "1189\n",
            "1191\n",
            "1193\n",
            "1195\n",
            "1197\n",
            "1199\n",
            "1201\n",
            "1203\n",
            "1205\n",
            "1207\n",
            "1209\n",
            "1211\n",
            "1213\n",
            "1215\n",
            "1217\n",
            "1219\n",
            "1221\n",
            "1223\n",
            "1225\n",
            "1227\n",
            "1229\n",
            "1231\n",
            "1233\n",
            "1235\n",
            "1237\n",
            "1239\n",
            "1241\n",
            "1243\n",
            "1245\n",
            "1247\n",
            "1249\n",
            "1251\n",
            "1253\n",
            "1255\n",
            "1257\n",
            "1259\n",
            "1261\n",
            "1263\n",
            "1265\n",
            "1267\n",
            "1269\n",
            "1271\n",
            "1273\n",
            "1275\n",
            "1277\n",
            "1279\n",
            "1281\n",
            "1283\n",
            "1285\n",
            "1287\n",
            "1289\n",
            "1291\n",
            "1293\n",
            "1295\n",
            "1297\n",
            "1299\n",
            "1301\n",
            "1303\n",
            "1305\n",
            "1307\n",
            "1309\n",
            "1311\n",
            "1313\n",
            "1315\n",
            "1317\n",
            "1319\n",
            "1321\n",
            "1323\n",
            "1325\n",
            "1327\n",
            "1329\n",
            "1331\n",
            "1333\n",
            "1335\n",
            "1337\n",
            "1339\n",
            "1341\n",
            "1343\n",
            "1345\n",
            "1347\n",
            "1349\n",
            "1351\n",
            "1353\n",
            "1355\n",
            "1357\n",
            "1359\n",
            "1361\n",
            "1363\n",
            "1365\n",
            "1367\n",
            "1369\n",
            "1371\n",
            "1373\n",
            "1375\n",
            "1377\n",
            "1379\n",
            "1381\n",
            "1383\n",
            "1385\n",
            "1387\n",
            "1389\n",
            "1391\n",
            "1393\n",
            "1395\n",
            "1397\n",
            "1399\n",
            "1401\n",
            "1403\n",
            "1405\n",
            "1407\n",
            "1409\n",
            "1411\n",
            "1413\n",
            "1415\n",
            "1417\n",
            "1419\n",
            "1421\n",
            "1423\n",
            "1425\n",
            "1427\n",
            "1429\n",
            "1431\n",
            "1433\n",
            "1435\n",
            "1437\n",
            "1439\n",
            "1441\n",
            "1443\n",
            "1445\n",
            "1447\n",
            "1449\n",
            "1451\n",
            "1453\n",
            "1455\n",
            "1457\n",
            "1459\n",
            "1461\n",
            "1463\n",
            "1465\n",
            "1467\n",
            "1469\n",
            "1471\n",
            "1473\n",
            "1475\n",
            "1477\n",
            "1479\n",
            "1481\n",
            "1483\n",
            "1485\n",
            "1487\n",
            "1489\n",
            "1491\n",
            "1493\n",
            "1495\n",
            "1497\n",
            "1499\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 3 - Elabore um programa em Python que calcule e escreva a soma de 10 números lidos."
      ],
      "metadata": {
        "id": "_JgDJw-snLOp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = 0\n",
        "soma = 0\n",
        "\n",
        "for x in range(1, 11):\n",
        "    num = float(input(f\"Digite o {x}° número: \"))\n",
        "    soma = num + soma\n",
        "\n",
        "print(f\"A soma dos números é: {soma}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jqcw5NvInQ3A",
        "outputId": "f539688f-0d0b-4490-c323-be2c9f15d1b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite o 1° número: 10\n",
            "Digite o 2° número: 10\n",
            "Digite o 3° número: 10\n",
            "Digite o 4° número: 10\n",
            "Digite o 5° número: 10\n",
            "Digite o 6° número: 10\n",
            "Digite o 7° número: 10\n",
            "Digite o 8° número: 10\n",
            "Digite o 9° número: 10\n",
            "Digite o 10° número: 10\n",
            "A soma dos números é: 100.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 4 - Faça um programa em Python que leia a nota de 10 alunos de uma turma. Ao final, deve ser escrita a média geral da turma."
      ],
      "metadata": {
        "id": "b5MlxVWKpO8Y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = 0\n",
        "soma = 0\n",
        "\n",
        "for x in range(1, 11):\n",
        "    num = float(input(f\"Digite a nota do {x}° aluno: \"))\n",
        "    soma = num + soma\n",
        "    media = soma / x\n",
        "\n",
        "print(f\"A média geral da turma é: {media}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R_mqwXUMpdUA",
        "outputId": "43eaf1a0-8e10-466f-8ff6-b9c23a721336"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite a nota do 1° aluno: 10\n",
            "Digite a nota do 2° aluno: 5\n",
            "Digite a nota do 3° aluno: 7\n",
            "Digite a nota do 4° aluno: 3\n",
            "Digite a nota do 5° aluno: 7.5\n",
            "Digite a nota do 6° aluno: 6.5\n",
            "Digite a nota do 7° aluno: 4\n",
            "Digite a nota do 8° aluno: 3\n",
            "Digite a nota do 9° aluno: 10\n",
            "Digite a nota do 10° aluno: 9\n",
            "A média geral da turma é: 6.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 5 - Faça um programa em Python que leia 5 números. Para cada número fornecido, escreva se ele é NULO, NEGATIVO ou POSITIVO.\n"
      ],
      "metadata": {
        "id": "Nb884MptuaFD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num = 0\n",
        "\n",
        "for x in range(1, 6):\n",
        "    num = float(input(f\"Digite o {x}° número: \"))\n",
        "    if num == 0:\n",
        "        print(f\"O número {num} é NULO\")\n",
        "    elif num < 0:\n",
        "        print(f\"O número {num} é NEGATIVO\")\n",
        "    else:\n",
        "        print(f\"O número {num} é POSITIVO\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E0jdjmwJuqqU",
        "outputId": "587da653-16b7-4d96-8332-95cac18cdb75"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite o 1° número: 5\n",
            "O número 5.0 é POSITIVO\n",
            "Digite o 2° número: 4\n",
            "O número 4.0 é POSITIVO\n",
            "Digite o 3° número: -3\n",
            "O número -3.0 é NEGATIVO\n",
            "Digite o 4° número: 0\n",
            "O número 0.0 é NULO\n",
            "Digite o 5° número: 7\n",
            "O número 7.0 é POSITIVO\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 6 - Ler dois valores inteiros e escrever os números em sequência do menor até maior valor."
      ],
      "metadata": {
        "id": "GHza7NLj0GmN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num_1 = float(input(\"Digite o primeiro número: \"))\n",
        "num_2 = float(input(\"Digite o segundo número: \"))\n",
        "\n",
        "if num_1 < num_2:\n",
        "    print(num_1, num_2)\n",
        "elif num_1 == num_2:\n",
        "    print(\"NÚMEROS IGUAIS\")\n",
        "else:\n",
        "    print(num_2, num_1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4RJZDXLP0alh",
        "outputId": "af20fb91-ff81-4e1f-e022-d047e2ae68c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite o primeiro número: 7\n",
            "Digite o segundo número: 8\n",
            "7.0 8.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 7 -  Faça um programa em Python que escreva os números pares entre 100 e 200."
      ],
      "metadata": {
        "id": "QrwXDgsr1gOD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for x in range(1000, 1501):\n",
        "    if x % 2 == 0:\n",
        "        print(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dI1By_za7v3E",
        "outputId": "b89f8d03-4dca-4677-a89b-c959c2fa18e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1000\n",
            "1002\n",
            "1004\n",
            "1006\n",
            "1008\n",
            "1010\n",
            "1012\n",
            "1014\n",
            "1016\n",
            "1018\n",
            "1020\n",
            "1022\n",
            "1024\n",
            "1026\n",
            "1028\n",
            "1030\n",
            "1032\n",
            "1034\n",
            "1036\n",
            "1038\n",
            "1040\n",
            "1042\n",
            "1044\n",
            "1046\n",
            "1048\n",
            "1050\n",
            "1052\n",
            "1054\n",
            "1056\n",
            "1058\n",
            "1060\n",
            "1062\n",
            "1064\n",
            "1066\n",
            "1068\n",
            "1070\n",
            "1072\n",
            "1074\n",
            "1076\n",
            "1078\n",
            "1080\n",
            "1082\n",
            "1084\n",
            "1086\n",
            "1088\n",
            "1090\n",
            "1092\n",
            "1094\n",
            "1096\n",
            "1098\n",
            "1100\n",
            "1102\n",
            "1104\n",
            "1106\n",
            "1108\n",
            "1110\n",
            "1112\n",
            "1114\n",
            "1116\n",
            "1118\n",
            "1120\n",
            "1122\n",
            "1124\n",
            "1126\n",
            "1128\n",
            "1130\n",
            "1132\n",
            "1134\n",
            "1136\n",
            "1138\n",
            "1140\n",
            "1142\n",
            "1144\n",
            "1146\n",
            "1148\n",
            "1150\n",
            "1152\n",
            "1154\n",
            "1156\n",
            "1158\n",
            "1160\n",
            "1162\n",
            "1164\n",
            "1166\n",
            "1168\n",
            "1170\n",
            "1172\n",
            "1174\n",
            "1176\n",
            "1178\n",
            "1180\n",
            "1182\n",
            "1184\n",
            "1186\n",
            "1188\n",
            "1190\n",
            "1192\n",
            "1194\n",
            "1196\n",
            "1198\n",
            "1200\n",
            "1202\n",
            "1204\n",
            "1206\n",
            "1208\n",
            "1210\n",
            "1212\n",
            "1214\n",
            "1216\n",
            "1218\n",
            "1220\n",
            "1222\n",
            "1224\n",
            "1226\n",
            "1228\n",
            "1230\n",
            "1232\n",
            "1234\n",
            "1236\n",
            "1238\n",
            "1240\n",
            "1242\n",
            "1244\n",
            "1246\n",
            "1248\n",
            "1250\n",
            "1252\n",
            "1254\n",
            "1256\n",
            "1258\n",
            "1260\n",
            "1262\n",
            "1264\n",
            "1266\n",
            "1268\n",
            "1270\n",
            "1272\n",
            "1274\n",
            "1276\n",
            "1278\n",
            "1280\n",
            "1282\n",
            "1284\n",
            "1286\n",
            "1288\n",
            "1290\n",
            "1292\n",
            "1294\n",
            "1296\n",
            "1298\n",
            "1300\n",
            "1302\n",
            "1304\n",
            "1306\n",
            "1308\n",
            "1310\n",
            "1312\n",
            "1314\n",
            "1316\n",
            "1318\n",
            "1320\n",
            "1322\n",
            "1324\n",
            "1326\n",
            "1328\n",
            "1330\n",
            "1332\n",
            "1334\n",
            "1336\n",
            "1338\n",
            "1340\n",
            "1342\n",
            "1344\n",
            "1346\n",
            "1348\n",
            "1350\n",
            "1352\n",
            "1354\n",
            "1356\n",
            "1358\n",
            "1360\n",
            "1362\n",
            "1364\n",
            "1366\n",
            "1368\n",
            "1370\n",
            "1372\n",
            "1374\n",
            "1376\n",
            "1378\n",
            "1380\n",
            "1382\n",
            "1384\n",
            "1386\n",
            "1388\n",
            "1390\n",
            "1392\n",
            "1394\n",
            "1396\n",
            "1398\n",
            "1400\n",
            "1402\n",
            "1404\n",
            "1406\n",
            "1408\n",
            "1410\n",
            "1412\n",
            "1414\n",
            "1416\n",
            "1418\n",
            "1420\n",
            "1422\n",
            "1424\n",
            "1426\n",
            "1428\n",
            "1430\n",
            "1432\n",
            "1434\n",
            "1436\n",
            "1438\n",
            "1440\n",
            "1442\n",
            "1444\n",
            "1446\n",
            "1448\n",
            "1450\n",
            "1452\n",
            "1454\n",
            "1456\n",
            "1458\n",
            "1460\n",
            "1462\n",
            "1464\n",
            "1466\n",
            "1468\n",
            "1470\n",
            "1472\n",
            "1474\n",
            "1476\n",
            "1478\n",
            "1480\n",
            "1482\n",
            "1484\n",
            "1486\n",
            "1488\n",
            "1490\n",
            "1492\n",
            "1494\n",
            "1496\n",
            "1498\n",
            "1500\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 8 - Escrever um programa em Python que leia um valor para n, inteiro e positivo, e escreva a tabuada de n, até n x 10"
      ],
      "metadata": {
        "id": "c__fngZ65tTl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "n = 0\n",
        "r = 0\n",
        "\n",
        "while True:\n",
        "    n = int(input(\"Digite um número inteiro e positivo: \"))\n",
        "    if n > 0:\n",
        "        break\n",
        "    elif n == 0:\n",
        "      print(f\"O número {n} é NULO, informe um número positivo\")\n",
        "    elif n < 0:\n",
        "      print(f\"O número {n} é NEGATIVO, informe um número positivo\")\n",
        "\n",
        "for x in range(1, 11):\n",
        "    r = n * x\n",
        "    print(f\" {n} x {x} = {r}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KGg2ygjz562F",
        "outputId": "05e170a3-ce38-4d1a-c210-1cf9277ed4a1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite um número inteiro e positivo: 4\n",
            " 4 x 1 = 4\n",
            " 4 x 2 = 8\n",
            " 4 x 3 = 12\n",
            " 4 x 4 = 16\n",
            " 4 x 5 = 20\n",
            " 4 x 6 = 24\n",
            " 4 x 7 = 28\n",
            " 4 x 8 = 32\n",
            " 4 x 9 = 36\n",
            " 4 x 10 = 40\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 9 - Escrever um programa em Python que gera os números de 1000 a 1999 e escreve aqueles que divididos por 11 dão um resto igual a 5."
      ],
      "metadata": {
        "id": "l7zguU7j7L0t"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for x in range(1000, 2000):\n",
        "    if x % 11 == 5:\n",
        "        print(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lgh-M8Fl7QCj",
        "outputId": "b6e9423d-f0a6-4c42-bffb-f18ef73da83f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1006\n",
            "1017\n",
            "1028\n",
            "1039\n",
            "1050\n",
            "1061\n",
            "1072\n",
            "1083\n",
            "1094\n",
            "1105\n",
            "1116\n",
            "1127\n",
            "1138\n",
            "1149\n",
            "1160\n",
            "1171\n",
            "1182\n",
            "1193\n",
            "1204\n",
            "1215\n",
            "1226\n",
            "1237\n",
            "1248\n",
            "1259\n",
            "1270\n",
            "1281\n",
            "1292\n",
            "1303\n",
            "1314\n",
            "1325\n",
            "1336\n",
            "1347\n",
            "1358\n",
            "1369\n",
            "1380\n",
            "1391\n",
            "1402\n",
            "1413\n",
            "1424\n",
            "1435\n",
            "1446\n",
            "1457\n",
            "1468\n",
            "1479\n",
            "1490\n",
            "1501\n",
            "1512\n",
            "1523\n",
            "1534\n",
            "1545\n",
            "1556\n",
            "1567\n",
            "1578\n",
            "1589\n",
            "1600\n",
            "1611\n",
            "1622\n",
            "1633\n",
            "1644\n",
            "1655\n",
            "1666\n",
            "1677\n",
            "1688\n",
            "1699\n",
            "1710\n",
            "1721\n",
            "1732\n",
            "1743\n",
            "1754\n",
            "1765\n",
            "1776\n",
            "1787\n",
            "1798\n",
            "1809\n",
            "1820\n",
            "1831\n",
            "1842\n",
            "1853\n",
            "1864\n",
            "1875\n",
            "1886\n",
            "1897\n",
            "1908\n",
            "1919\n",
            "1930\n",
            "1941\n",
            "1952\n",
            "1963\n",
            "1974\n",
            "1985\n",
            "1996\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 10 - Faça um programa em Python que leia um número qualquer (N), e realize a soma dos números de 1 até N. Ao final, deve-se escrever o resultado.\n"
      ],
      "metadata": {
        "id": "7tzGKGZX7fjz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "n = int(input(\"Digite um número inteiro positivo: \"))\n",
        "\n",
        "if n <= 0:\n",
        "    print(\"Por favor, digite um número inteiro positivo.\")\n",
        "else:\n",
        "    soma = 0\n",
        "    for x in range(1, n + 1):\n",
        "        soma += x\n",
        "    print(f\"A soma dos números de 1 até {n} é: {soma}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LjY3STWr7lB8",
        "outputId": "51dbc7d2-f274-470b-e9fd-755c0542830f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite um número inteiro positivo: 10\n",
            "A soma dos números de 1 até 10 é: 55\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 11 - Faça um programa em Python para ler 10 valores inteiros. Para cada valor fornecido escreva uma mensagem que indica se cada valor fornecido é PAR ou ÍMPAR."
      ],
      "metadata": {
        "id": "2b_U9Ee2-Ime"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num = 0\n",
        "\n",
        "for x in range(1, 11):\n",
        "    num = float(input(f\"Digite o {x}° número: \"))\n",
        "    if num % 2 == 0:\n",
        "        print(f\"{num} é PAR\")\n",
        "    elif num % 2 != 0:\n",
        "        print(f\"{num} é ÍMPAR\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eBVZW17m-NOW",
        "outputId": "7ea773a7-11df-400e-a807-b05c7b70d6b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite o 1° número: 1\n",
            "1.0 é ÍMPAR\n",
            "Digite o 2° número: 2\n",
            "2.0 é PAR\n",
            "Digite o 3° número: 3\n",
            "3.0 é ÍMPAR\n",
            "Digite o 4° número: 4\n",
            "4.0 é PAR\n",
            "Digite o 5° número: 5\n",
            "5.0 é ÍMPAR\n",
            "Digite o 6° número: 6\n",
            "6.0 é PAR\n",
            "Digite o 7° número: 7\n",
            "7.0 é ÍMPAR\n",
            "Digite o 8° número: 8\n",
            "8.0 é PAR\n",
            "Digite o 9° número: 9\n",
            "9.0 é ÍMPAR\n",
            "Digite o 10° número: 10\n",
            "10.0 é PAR\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 12 - Faça um programa em Python que leia a idade de 10 alunos, calcule e escreva a média de idade destes."
      ],
      "metadata": {
        "id": "mSoX16ok_iSe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = 0\n",
        "soma = 0\n",
        "\n",
        "for x in range(1, 11):\n",
        "    idade = float(input(f\"Digite a idade do {x}° aluno: \"))\n",
        "    soma = idade + soma\n",
        "    media = soma / x\n",
        "\n",
        "print(f\"A média de idade da turma é: {media:.1f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lk06guud_01w",
        "outputId": "ed84f076-3153-42cc-9fb5-575b20841476"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite a idade do 1° aluno: 10\n",
            "Digite a idade do 2° aluno: 11\n",
            "Digite a idade do 3° aluno: 12\n",
            "Digite a idade do 4° aluno: 13\n",
            "Digite a idade do 5° aluno: 14\n",
            "Digite a idade do 6° aluno: 15\n",
            "Digite a idade do 7° aluno: 16\n",
            "Digite a idade do 8° aluno: 17\n",
            "Digite a idade do 9° aluno: 18\n",
            "Digite a idade do 10° aluno: 19\n",
            "A média de idade da turma é: 14.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 13 - Faça um algoritmo em Python que leia dois valores inteiros e escreva se eles estão em ordem crescente, decrescente ou são iguais, após isso escreva todos os valores do menor ao maior.\n"
      ],
      "metadata": {
        "id": "qg_ZjiRJArb6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num_1 = int(input(\"Digite o primeiro número: \"))\n",
        "num_2 = int(input(\"Digite o segundo número: \"))\n",
        "\n",
        "if num_1 < num_2:\n",
        "    print(\"Os números estão em ordem crescente\")\n",
        "    print(num_1, num_2)\n",
        "elif num_1 == num_2:\n",
        "    print(\"NÚMEROS IGUAIS\")\n",
        "    print(num_1, num_2)\n",
        "else:\n",
        "    print(\"Os números estão em ordem decrescente\")\n",
        "    print(num_2, num_1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R5aHIOmKAycj",
        "outputId": "25a93d68-1cdb-49b4-bfc2-f2f3dcad5f98"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite o primeiro número: 10\n",
            "Digite o segundo número: 11\n",
            "Os números estão em ordem crescente\n",
            "10 11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 14 - Escrever um programa em Python que lê 10 valores para n, um de cada vez, todos inteiros e positivos, e para cada n lido, escreva a tabuada de 1 até n de n."
      ],
      "metadata": {
        "id": "DKNVLtb4B-B9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "n = 0\n",
        "r = 0\n",
        "\n",
        "for i in range(1, 11):\n",
        "    n = int(input(\"Digite um número inteiro e positivo: \"))\n",
        "    if n > 0:\n",
        "      for x in range(1, n + 1):\n",
        "        r = n * x\n",
        "        print(f\" {n} x {x} = {r}\")\n",
        "    elif n <= 0:\n",
        "        print(\"Este número não é inteiro e positivo\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PBt6Q9yHCBL9",
        "outputId": "ed55b87e-75a6-4250-9a5c-b4ed9f6e5e64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite um número inteiro e positivo: 1\n",
            " 1 x 1 = 1\n",
            "Digite um número inteiro e positivo: 2\n",
            " 2 x 1 = 2\n",
            " 2 x 2 = 4\n",
            "Digite um número inteiro e positivo: 3\n",
            " 3 x 1 = 3\n",
            " 3 x 2 = 6\n",
            " 3 x 3 = 9\n",
            "Digite um número inteiro e positivo: 4\n",
            " 4 x 1 = 4\n",
            " 4 x 2 = 8\n",
            " 4 x 3 = 12\n",
            " 4 x 4 = 16\n",
            "Digite um número inteiro e positivo: 5\n",
            " 5 x 1 = 5\n",
            " 5 x 2 = 10\n",
            " 5 x 3 = 15\n",
            " 5 x 4 = 20\n",
            " 5 x 5 = 25\n",
            "Digite um número inteiro e positivo: 6\n",
            " 6 x 1 = 6\n",
            " 6 x 2 = 12\n",
            " 6 x 3 = 18\n",
            " 6 x 4 = 24\n",
            " 6 x 5 = 30\n",
            " 6 x 6 = 36\n",
            "Digite um número inteiro e positivo: 7\n",
            " 7 x 1 = 7\n",
            " 7 x 2 = 14\n",
            " 7 x 3 = 21\n",
            " 7 x 4 = 28\n",
            " 7 x 5 = 35\n",
            " 7 x 6 = 42\n",
            " 7 x 7 = 49\n",
            "Digite um número inteiro e positivo: 8\n",
            " 8 x 1 = 8\n",
            " 8 x 2 = 16\n",
            " 8 x 3 = 24\n",
            " 8 x 4 = 32\n",
            " 8 x 5 = 40\n",
            " 8 x 6 = 48\n",
            " 8 x 7 = 56\n",
            " 8 x 8 = 64\n",
            "Digite um número inteiro e positivo: 9\n",
            " 9 x 1 = 9\n",
            " 9 x 2 = 18\n",
            " 9 x 3 = 27\n",
            " 9 x 4 = 36\n",
            " 9 x 5 = 45\n",
            " 9 x 6 = 54\n",
            " 9 x 7 = 63\n",
            " 9 x 8 = 72\n",
            " 9 x 9 = 81\n",
            "Digite um número inteiro e positivo: 10\n",
            " 10 x 1 = 10\n",
            " 10 x 2 = 20\n",
            " 10 x 3 = 30\n",
            " 10 x 4 = 40\n",
            " 10 x 5 = 50\n",
            " 10 x 6 = 60\n",
            " 10 x 7 = 70\n",
            " 10 x 8 = 80\n",
            " 10 x 9 = 90\n",
            " 10 x 10 = 100\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 15 - Escreva um programa que lê um número inteiro N do usuário. O programa deverá escrever na tela o fatorial desse número (N!)."
      ],
      "metadata": {
        "id": "C7j69uArdyS5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "N = int(input(\"Digite um número inteiro N: \"))\n",
        "if N < 0:\n",
        "    print(\"Não é possível calcular o fatorial de um número negativo.\")\n",
        "elif N == 0:\n",
        "    print(\"O fatorial de 0 é 1.\")\n",
        "else:\n",
        "    fatorial = 1\n",
        "    for i in range(1, N + 1):\n",
        "        fatorial *= i\n",
        "    print(f\"O fatorial de {N} é: {fatorial}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aewSf6Ikeyx7",
        "outputId": "c5666880-e6c6-4ce4-86cb-bda9241e0684"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite um número inteiro N: 5\n",
            "O fatorial de 5 é: 120\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 16 - Escreva um programa para uma urna eletrônica. O programa fica lendo os votos até que o usuário informe o valor 4444444 (código de finalização da urna). Após a finalização da urna, o programa deverá escrever na tela a quantidade de votos e o percentual de votos para cada uma das opções abaixo:\n",
        "\n",
        "\n",
        "```\n",
        "a. Votos no Candidato 77\n",
        "b. Votos no Candidato 39\n",
        "c. Votos no Candidato 66\n",
        "d. Voto em branco (0)\n",
        "e. Votos nulos (nenhuma das opções anteriores)\n",
        "f. Votos válidos (aqueles computados para algum candidato)\n",
        "g. Votos não válidos\n",
        "```"
      ],
      "metadata": {
        "id": "ynjlqzm9B-Av"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "candidato = 0\n",
        "c1 = 77\n",
        "c2 = 39\n",
        "c3 = 66\n",
        "voto_c1 = 0\n",
        "voto_c2 = 0\n",
        "voto_c3 = 0\n",
        "nulo = 0\n",
        "branco = 0\n",
        "\n",
        "while candidato != 4444444:\n",
        "    print(f\"Vote {c1} para o candidato {c1}\")\n",
        "    print(f\"Vote {c2} para o candidato {c2}\")\n",
        "    print(f\"Vote {c3} para o candidato {c3}\")\n",
        "    print(f\"Vote 0 para votar em branco\")\n",
        "    candidato_str = input(\"Digite o número do candidato: \")\n",
        "\n",
        "    if candidato_str == str(c1):\n",
        "        voto_c1 += 1\n",
        "        print(f\"Voto para o Candidato {c1} computado\")\n",
        "    elif candidato_str == str(c2):\n",
        "        voto_c2 += 1\n",
        "        print(f\"Voto para o Candidato {c2} computado\")\n",
        "    elif candidato_str == str(c3):\n",
        "        voto_c3 += 1\n",
        "        print(f\"Voto para o Candidato {c3} computado\")\n",
        "    elif candidato_str == str(branco):\n",
        "        branco += 1\n",
        "        print(\"Voto em branco computado\")\n",
        "    elif candidato_str == \"4444444\":\n",
        "        print(\"URNA ENCERRADA\")\n",
        "        break\n",
        "    elif candidato_str == \"\":\n",
        "        print(\"Voto não válido: digite um número.\")\n",
        "        nulo += 1\n",
        "    else:\n",
        "        print(\"Voto não válido: candidato inexistente.\")\n",
        "        nulo += 1\n",
        "\n",
        "valido = voto_c1 + voto_c2 + voto_c3\n",
        "nao_valido = branco + nulo\n",
        "total = valido + nao_valido\n",
        "\n",
        "if total > 0:\n",
        "    percentual_c1 = (voto_c1 * 100) / total\n",
        "    percentual_c2 = (voto_c2 * 100) / total\n",
        "    percentual_c3 = (voto_c3 * 100) / total\n",
        "    percentual_branco = (branco * 100) / total\n",
        "    percentual_nulo = (nulo * 100) / total\n",
        "    percentual_valido = (valido * 100) / total\n",
        "    percentual_nao_valido = (nao_valido * 100) / total\n",
        "else:\n",
        "    percentual_c1 = 0\n",
        "    percentual_c2 = 0\n",
        "    percentual_c3 = 0\n",
        "    percentual_branco = 0\n",
        "    percentual_nulo = 0\n",
        "    percentual_valido = 0\n",
        "    percentual_nao_valido = 0\n",
        "\n",
        "print(\"------RESULTADO------\")\n",
        "print(f\"\\nVotos no Candidato {c1}: {voto_c1} ({round(percentual_c1, 2)}%)\")\n",
        "print(f\"Votos no Candidato {c2}: {voto_c2} ({round(percentual_c2, 2)}%)\")\n",
        "print(f\"Votos no Candidato {c3}: {voto_c3} ({round(percentual_c3, 2)}%)\")\n",
        "print(f\"Votos em branco: {branco} ({round(percentual_branco, 2)}%)\")\n",
        "print(f\"Votos nulos: {nulo} ({round(percentual_nulo, 2)}%)\")\n",
        "print(f\"Votos válidos: {valido} ({round(percentual_valido, 2)}%)\")\n",
        "print(f\"Votos não válidos: {nao_valido} ({round(percentual_nao_valido, 2)}%)\")\n"
      ],
      "metadata": {
        "id": "uN4czb22FpBE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2f199ba7-986d-4c46-af11-82cb4684f819"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Vote 77 para o candidato 77\n",
            "Vote 39 para o candidato 39\n",
            "Vote 66 para o candidato 66\n",
            "Vote 0 para votar em branco\n",
            "Digite o número do candidato: 77\n",
            "Voto para o Candidato 77 computado\n",
            "Vote 77 para o candidato 77\n",
            "Vote 39 para o candidato 39\n",
            "Vote 66 para o candidato 66\n",
            "Vote 0 para votar em branco\n",
            "Digite o número do candidato: 77\n",
            "Voto para o Candidato 77 computado\n",
            "Vote 77 para o candidato 77\n",
            "Vote 39 para o candidato 39\n",
            "Vote 66 para o candidato 66\n",
            "Vote 0 para votar em branco\n",
            "Digite o número do candidato: 77\n",
            "Voto para o Candidato 77 computado\n",
            "Vote 77 para o candidato 77\n",
            "Vote 39 para o candidato 39\n",
            "Vote 66 para o candidato 66\n",
            "Vote 0 para votar em branco\n",
            "Digite o número do candidato: 77\n",
            "Voto para o Candidato 77 computado\n",
            "Vote 77 para o candidato 77\n",
            "Vote 39 para o candidato 39\n",
            "Vote 66 para o candidato 66\n",
            "Vote 0 para votar em branco\n",
            "Digite o número do candidato: 77\n",
            "Voto para o Candidato 77 computado\n",
            "Vote 77 para o candidato 77\n",
            "Vote 39 para o candidato 39\n",
            "Vote 66 para o candidato 66\n",
            "Vote 0 para votar em branco\n",
            "Digite o número do candidato: 39\n",
            "Voto para o Candidato 39 computado\n",
            "Vote 77 para o candidato 77\n",
            "Vote 39 para o candidato 39\n",
            "Vote 66 para o candidato 66\n",
            "Vote 0 para votar em branco\n",
            "Digite o número do candidato: 66\n",
            "Voto para o Candidato 66 computado\n",
            "Vote 77 para o candidato 77\n",
            "Vote 39 para o candidato 39\n",
            "Vote 66 para o candidato 66\n",
            "Vote 0 para votar em branco\n",
            "Digite o número do candidato: 0\n",
            "Voto em branco computado\n",
            "Vote 77 para o candidato 77\n",
            "Vote 39 para o candidato 39\n",
            "Vote 66 para o candidato 66\n",
            "Vote 0 para votar em branco\n",
            "Digite o número do candidato: \n",
            "Voto não válido: digite um número.\n",
            "Vote 77 para o candidato 77\n",
            "Vote 39 para o candidato 39\n",
            "Vote 66 para o candidato 66\n",
            "Vote 0 para votar em branco\n",
            "Digite o número do candidato: 1851615\n",
            "Voto não válido: candidato inexistente.\n",
            "Vote 77 para o candidato 77\n",
            "Vote 39 para o candidato 39\n",
            "Vote 66 para o candidato 66\n",
            "Vote 0 para votar em branco\n",
            "Digite o número do candidato: 4444444\n",
            "URNA ENCERRADA\n",
            "------RESULTADO------\n",
            "\n",
            "Votos no Candidato 77: 5 (50.0%)\n",
            "Votos no Candidato 39: 1 (10.0%)\n",
            "Votos no Candidato 66: 1 (10.0%)\n",
            "Votos em branco: 1 (10.0%)\n",
            "Votos nulos: 2 (20.0%)\n",
            "Votos válidos: 7 (70.0%)\n",
            "Votos não válidos: 3 (30.0%)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "iFgAaJ4wubtJ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}