{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNfKXnVkAZdE97+ED+LNvfG"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "### 1 - Faça um algoritmo em Python que leia a nota de vários alunos de uma turma. Ao final, deve ser escrita a média geral da turma. A leitura das médias somente encerra quando uma nota negativa for digitada."
      ],
      "metadata": {
        "id": "Q7ZdsaDWDGiC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "n_notas= 0\n",
        "total = [ ]\n",
        "\n",
        "print(\"Digite a nota do aluno ou digite uma nota negativa para encerrar:  \")\n",
        "while True:\n",
        "  nota = float(input(\"NOTA:  \"))\n",
        "  if nota < 0:\n",
        "    break\n",
        "  total.append(nota)\n",
        "  n_notas += 1\n",
        "  media = sum(total) / n_notas\n",
        "print(\"PROGRAMA ENCERRADO\")\n",
        "print(\"A média geral da turma é: \", round(media, 2))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iPV3D2s-DZUB",
        "outputId": "7bc24afb-bace-44bd-84e4-9f7e12f0cecc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite a nota do aluno ou digite uma nota negativa para encerrar:  \n",
            "NOTA:  8\n",
            "NOTA:  8\n",
            "NOTA:  8\n",
            "NOTA:  8\n",
            "NOTA:  8\n",
            "NOTA:  -7\n",
            "PROGRAMA ENCERRADO\n",
            "A média geral da turma é:  8.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 2 - Faça um programa em Python para repetir a leitura de um número enquanto o valor fornecido for diferente de 0. Para cada número fornecido, escrever se ele é NEGATIVO ou POSITIVO. Quando o número 0 for fornecido o algoritmo deve encerrar informando o usuário."
      ],
      "metadata": {
        "id": "bBsmuR4vHF2B"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num = 1\n",
        "\n",
        "while num != 0:\n",
        "  num = int(input(\"Digite um número: \"))\n",
        "  if num < 0:\n",
        "    print(\"NEGATIVO\")\n",
        "  else:\n",
        "    print(\"POSITIVO\")\n",
        "\n",
        "print(\"PROGRAMA ENCERRADO\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-ek1VF94HM4N",
        "outputId": "eaffeac2-383b-4cb9-f22c-b8975f1a5c30"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite um número: 8\n",
            "POSITIVO\n",
            "Digite um número: -8\n",
            "NEGATIVO\n",
            "Digite um número: 0\n",
            "POSITIVO\n",
            "PROGRAMA ENCERRADO\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 3 - Faça um programa em Python para ler uma quantidade indeterminada de valores inteiros. Para cada valor fornecido apresentar uma mensagem que indique se o valor fornecido é PAR ou ÍMPAR. O programa será encerrado imediatamente após a leitura de um valor NULO (zero) ou NEGATIVO."
      ],
      "metadata": {
        "id": "_Bxk2JxnIaEF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num = 1\n",
        "\n",
        "print(\"Digite um número ou digite um valor NULO (zero) ou NEGATIVO para encerrar o programa \")\n",
        "while num > 0 or num != 0:\n",
        "  num = int(input(\"Número: \"))\n",
        "  if num < 0 or num == 0:\n",
        "    break\n",
        "  elif num % 2 == 0:\n",
        "        print(\"PAR\")\n",
        "  else:\n",
        "      if num % 2 != 0:\n",
        "        print(\"ÍMPAR\")\n",
        "\n",
        "print(\"PROGRAMA ENCERRADO\")\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6b0fHAtcIlDj",
        "outputId": "a47fb12d-e023-4295-a1c5-358a810a23d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite um número ou digite um valor NULO (zero) ou NEGATIVO para encerrar o programa \n",
            "Número: 8\n",
            "PAR\n",
            "Número: 9\n",
            "ÍMPAR\n",
            "Número: -4\n",
            "PROGRAMA ENCERRADO\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 4 - Sabe-se que não existe divisão por zero, para isso faça um programa que leia dois valores inteiros e escreva o resultado da divisão do primeiro pelo segundo. Se o segundo valor informado for ZERO, deve ser impressa uma mensagem de VALOR INVÁLIDO e uma nova leitura do segundo valor deve ser realizada. Ao final do programa deve ser impressa a seguinte mensagem: VOCÊ DESEJA OUTRO CÁLCULO (S/N). Se a resposta for S o programa deverá retornar ao começo, caso contrário deverá encerrar."
      ],
      "metadata": {
        "id": "YPEuwFGn-9SJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "resposta = \"S\"\n",
        "\n",
        "print(\"Digite dois números inteiros para descobrir a divisão entre eles\")\n",
        "\n",
        "while resposta == \"S\":\n",
        "    num_1 = int(input(\"Digite o primeiro número: \"))\n",
        "    num_2 = int(input(\"Digite o segundo número: \"))\n",
        "\n",
        "    while num_2 == 0:\n",
        "        print(\"VALOR INVÁLIDO\")\n",
        "        num_2 = int(input(\"Digite o segundo número: \"))\n",
        "\n",
        "    div = num_1 / num_2\n",
        "    print(f\"O resultado da divisão entre {num_1} e {num_2} é: {round(div, 2)}\")\n",
        "\n",
        "    resposta = input(\"Deseja fazer outro cálculo? (S/N) \")\n",
        "    if resposta == \"N\":\n",
        "        print(\"PROGRAMA ENCERRADO\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_Xns5IJf_2Sz",
        "outputId": "c27c83c3-52be-403a-bace-fe7268faa8ab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite dois números inteiros para descobrir a divisão entre eles\n",
            "Digite o primeiro número: 10\n",
            "Digite o segundo número: 5\n",
            "O resultado da divisão entre 10 e 5 é: 2.0\n",
            "Deseja fazer outro cálculo? (S/N) S\n",
            "Digite o primeiro número: 10\n",
            "Digite o segundo número: 0\n",
            "VALOR INVÁLIDO\n",
            "Digite o segundo número: 10\n",
            "O resultado da divisão entre 10 e 10 é: 1.0\n",
            "Deseja fazer outro cálculo? (S/N) N\n",
            "PROGRAMA ENCERRADO\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 5 - Faça um programa em Python que verifique a validade de uma senha fornecida pelo usuário. A senha válida é o número 1234.\n",
        "### OBS: Se a senha informada pelo usuário for inválida, a mensagem \"ACESSO NEGADO\" deve ser impressa e repetida a solicitação de uma nova senha até que ela seja válida. Caso contrário deve ser impressa a mensagem \"ACESSO PERMITIDO\" junto com um número que representa quantas vezes a senha foi informada."
      ],
      "metadata": {
        "id": "uc1XoetyF1Bb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tentativas = 0\n",
        "\n",
        "senha = input(\"Digite a senha: \")\n",
        "\n",
        "while senha != \"1234\":\n",
        "    print(\"ACESSO NEGADO\")\n",
        "    senha = (input(\"Digite a senha: \"))\n",
        "    tentativas += 1\n",
        "\n",
        "    if senha == \"1234\":\n",
        "      print(\"ACESSO PERMITIDO\")\n",
        "      print(\"Número de tentativas: \", tentativas)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "apkjGe2BGkPo",
        "outputId": "4eeee299-49c8-4d67-9bf9-af82ca1cfeb4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite a senha: 000\n",
            "ACESSO NEGADO\n",
            "Digite a senha: 00\n",
            "ACESSO NEGADO\n",
            "Digite a senha: 1234\n",
            "ACESSO PERMITIDO\n",
            "Número de tentativas:  2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 6 - Faça um programa em Python que verifique a validade de uma senha fornecida pelo usuário. A senha válida é o número 1234. Se a senha informada pelo usuário for válida a mensagem \"ACESSO PERMITIDO\" deve ser informada. O usuário não terá acesso ao sistema se errar a senha três vezes, neste caso a mensagem \"ACESSO NEGADO\" deve ser informada e a cada vez que o usuário errar a senha, dentro do limite, a mensagem informada será \"SENHA ERRADA, TENTATIVA X DE 3\", sendo o X o número da tentativa."
      ],
      "metadata": {
        "id": "LY0x8jxlLlL9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tentativas = 0\n",
        "\n",
        "while tentativas < 3:\n",
        "    senha = input(\"Digite a senha: \")\n",
        "    tentativas += 1\n",
        "\n",
        "    if senha == \"1234\":\n",
        "        print(\"ACESSO PERMITIDO\")\n",
        "        break\n",
        "    else:\n",
        "        print(f\"SENHA ERRADA, TENTATIVA {tentativas} DE 3\")\n",
        "\n",
        "if tentativas == 3 and senha != \"1234\":\n",
        "    print(\"ACESSO NEGADO\")"
      ],
      "metadata": {
        "id": "yShNV_azLt99",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c45b704b-8d67-476b-fdfa-110f34585186"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite a senha: 12347\n",
            "SENHA ERRADA, TENTATIVA 1 DE 3\n",
            "Digite a senha: 1234\n",
            "ACESSO PERMITIDO\n"
          ]
        }
      ]
    }
  ]
}